-- Metadata
meta.id = "Unified.FileManager"
meta.name = "File Manager"
meta.author = "Unified Intents"
meta.description = "File Manager Remote."

-------------------------------------------------------------------

local fs = libs.fs;
local server = libs.server;
local task = libs.task;
local l = libs.log;

-------------------------------------------------------------------

local fileevents = 
{
	{type="item", text = "Details", id="d"}, 
	{type="item",text="Open", id="o"},
	{type="item",text="Copy", id="c"}, 
	{type="item",text="Cut", id="m"}, 
	{type="item",text="Delete", id="del"}
};

local selectedItem;
local moveItem;
local path;
local items = {};
local stack = {};
local isMovingOrCopying = false;

-------------------------------------------------------------------

events.focus = function()
	stack = {};
	path = "";
	table.insert(stack, path);
	updateWithPath();
end

-------------------------------------------------------------------

function updateWithPath ()
	items = {};
	if path == "" then
		local root = fs.roots();
		l.trace("root");
		for t = 1, #root do
			local child = {};
			child.type = "item";
			child.icon = "folder";
			child.text = root[t];
			child.fullpath = root[t];
			child.isdir = true;
			table.insert(items, child);
		end
	else
		l.trace(path);
		local dirs = fs.dirs(path);
		local files = fs.files(path);	
		for t = 1, #dirs do
			local child = {};
			child.type = "item";
			child.icon = "folder";
			child.text = fs.fullname(dirs[t]);
			child.fullpath = dirs[t];
			child.isdir = true;
			table.insert(items, child);
		end
		for t = 1, #files do
			local child = {};
			child.type = "item";
			child.icon = "file";
			child.text = fs.fullname(files[t]);
			print(files[t]);
			child.fullpath = files[t];
			child.isdir = false;
			table.insert(items, child);
		end
	end
	server.update({ id = "lst", children = items});
end

-------------------------------------------------------------------

actions.onItem = function ( index )
	index = index + 1;
	if items[index].isdir then
		table.insert(stack, path);
		path = items[index].fullpath;
		updateWithPath();
	else
		task.open(items[index].fullpath);
	end
end

actions.onHolditem = function ( index )
	selectedItem = items[index+1];
	server.update({id = "fileevent", type="dialog", onTap="event", children = fileevents});
end

actions.event = function ( index )
	index = index +1;
	local s = fileevents[index];
	if s.id == "d" then
		local details = "";
		if fs.isdir(selectedItem.fullpath) then
			details = " Name: " .. fs.fullname(selectedItem.fullpath) .. 
			"\n Location: " .. fs.parent(selectedItem.fullpath) ..
			"\n Files: " .. #fs.files(selectedItem.fullpath) ..
			"\n Folders: " .. #fs.dirs(selectedItem.fullpath) ..
			"\n Created: " .. os.date("%c", fs.created(selectedItem.fullpath));
		else
			details = " Name: " .. fs.fullname(selectedItem.fullpath) .. 
			"\n Location: " .. fs.parent(selectedItem.fullpath) ..
			"\n Size: " .. fs.size(selectedItem.fullpath) ..
			"\n Created: " .. os.date("%c", fs.created(selectedItem.fullpath)) ..
			"\n Modified: " .. os.date("%c", fs.modified(selectedItem.fullpath));
		end
		server.update({id="details", type="dialog", text=details, children={{type="button", text="OK", Sign=1}}});
	elseif s.id == "m" then
		server.update({id="Move", type="dialog", text="Navigate to folder and long press on folder name and select paste.", children={{type="button", text="OK", Sign=1}}});

		if isMovingOrCopying then
			table.remove(fileevents);
		end		
		table.insert(fileevents, {type="item",text="Paste", id="pmove"});
		isMovingOrCopying = true;
		moveItem = selectedItem;
	elseif s.id == "pmove" then
		if fs.isdir(selectedItem.fullpath) then
			l.trace(moveItem.fullpath);
			l.trace(fs.combine(selectedItem.fullpath, fs.fullname(moveItem.fullpath)));
			fs.move(moveItem.fullpath, fs.combine(selectedItem.fullpath ,fs.fullname(moveItem.fullpath)));
		else
			fs.move(moveItem.fullpath, fs.parent(selectedItem.fullpath) .. fs.fullname(moveItem.fullpath));
		end
		table.remove(fileevents);
		updateWithPath();
		isMovingOrCopying = false;
	elseif s.id == "pcopy" then
		if fs.isdir(selectedItem.fullpath) then
			l.trace(moveItem.fullpath);
			l.trace(fs.combine(selectedItem.fullpath, fs.fullname(moveItem.fullpath)));
			fs.copy(moveItem.fullpath, fs.combine(selectedItem.fullpath ,fs.fullname(moveItem.fullpath)));
		else
			fs.copy(moveItem.fullpath, fs.parent(selectedItem.fullpath) .. fs.fullname(moveItem.fullpath));
		end
		table.remove(fileevents);
		isMovingOrCopying = false;
		updateWithPath();
	elseif s.id == "del" then
		server.update({id="dele", type="dialog", text="Do you realy like to delete " .. selectedItem.fullpath .. "?", children={{type="button", text="YES", onTap="deleteItem"}, {type="button", text="NO"}}});	
	elseif s.id == "c" then
		server.update({id="Copy", type="dialog", text="Navigate to folder and long press on folder name and select paste.", children={{type="button", text="OK", Sign=1}}});
		if isMovingOrCopying then
			table.remove(fileevents);
		end
		table.insert(fileevents, {type="item",text="Paste", id="pcopy"});
		moveItem = selectedItem;
		isMovingOrCopying = true;
	elseif s.id == "o" then
		task.open(selectedItem.fullpath);
	end

end

actions.deleteItem = function ()
	fs.delete(selectedItem.fullpath, true);
	updateWithPath();
end

actions.back = function ()
		path = table.remove(stack);
	    print(path);
		updateWithPath();
		if #stack == 0 then
			table.insert(stack, "");
		end
end

actions.up = function ()
	table.insert(stack, path);
	path = fs.parent(stack[#stack]);
	updateWithPath();
end

actions.home = function ()
	table.insert(stack, path);
	path = "";
	updateWithPath();
end

actions.refresh = function ()
	updateWithPath();
end

actions.goto = function ()
	server.update({id = "go", type="input", onTap="gotopath", text="Goto"});
end

actions.gotopath = function (path)
	if fs.isfile(path) then
		task.open(path);
	else
		path = path;
		updateWithPath();
	end
end

--@help Open file or folder on computer
--@param path
actions.open = function( path )
	task.open(path);
end